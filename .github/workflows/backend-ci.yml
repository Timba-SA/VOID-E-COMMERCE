# .github/workflows/backend-ci.yml

# Nombre del workflow que va a aparecer en la pestaña "Actions" de GitHub
name: Backend CI - Tests

# ==========================================================
# 1. EL "GATILLO": ¿CUÁNDO SE EJECUTA ESTE SCRIPT?
# ==========================================================
on:
  # Se ejecuta cuando subís código (push)...
  push:
    branches: [ "master", "develop" ] # ... a las ramas 'main' o 'develop'.
  # Y también cuando se abre o actualiza un Pull Request...
  pull_request:
    branches: [ "master", "develop" ] # ... que apunte a 'main' o 'develop'.

# ==========================================================
# 2. LOS "TRABAJOS": ¿QUÉ MISIONES TIENE QUE CUMPLIR?
# ==========================================================
jobs:
  # Definimos una única misión llamada "build-and-test"
  build-and-test:
    # Le pedimos a GitHub que nos preste una máquina virtual con Ubuntu
    runs-on: ubuntu-latest

    # ¡ESTA PARTE ES CLAVE!
    # Le decimos que todos los comandos de 'run' se ejecuten dentro de la carpeta /server
    defaults:
      run:
        working-directory: ./server

    # ==========================================================
    # 3. LOS "PASOS": LA RECETA QUE TIENE QUE SEGUIR EL ROBOT
    # ==========================================================
    steps:
      # Paso 1: Bajar el código del repositorio a la máquina virtual
      - name: Clonar el repositorio
        uses: actions/checkout@v4

      # Paso 2: Preparar el entorno de Python
      - name: Configurar Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Paso 3: Instalar todas las dependencias del backend
      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      # Paso 4: ¡El momento de la verdad! Correr todos los tests
      - name: Correr Tests con Pytest
        run: python -m pytest