"""
Script para aplicar manualmente la migraci√≥n de EmailTask
Agrega los campos necesarios para las optimizaciones del worker IA
"""

import asyncio
from sqlalchemy import text
from database import database

async def apply_migration():
    """Aplica los cambios de DB para EmailTask optimizado"""
    
    print("üîß Iniciando migraci√≥n de EmailTask...")
    
    # Inicializar el engine de la base de datos
    if database.AsyncSessionLocal is None:
        print("üì¶ Inicializando engine de base de datos...")
        database.setup_database_engine()
    
    async with database.AsyncSessionLocal() as session:
        try:
            # 1. Agregar columna error_message
            print("üìù Agregando columna 'error_message'...")
            try:
                await session.execute(text(
                    "ALTER TABLE email_tasks ADD COLUMN IF NOT EXISTS error_message TEXT"
                ))
                print("‚úÖ Columna 'error_message' agregada")
            except Exception as e:
                print(f"‚ö†Ô∏è error_message: {e}")
            
            # 2. Agregar columna last_attempt_at
            print("üìù Agregando columna 'last_attempt_at'...")
            try:
                await session.execute(text(
                    "ALTER TABLE email_tasks ADD COLUMN IF NOT EXISTS last_attempt_at TIMESTAMP"
                ))
                print("‚úÖ Columna 'last_attempt_at' agregada")
            except Exception as e:
                print(f"‚ö†Ô∏è last_attempt_at: {e}")
            
            # 3. Hacer uid NOT NULL (primero actualizar valores nulos)
            print("üìù Actualizando UIDs nulos...")
            try:
                result = await session.execute(text(
                    "UPDATE email_tasks SET uid = CAST(id AS VARCHAR) WHERE uid IS NULL"
                ))
                rows_updated = result.rowcount
                print(f"‚úÖ {rows_updated} registros actualizados con UID")
            except Exception as e:
                print(f"‚ö†Ô∏è actualizar UIDs: {e}")
            
            print("üìù Haciendo UID NOT NULL...")
            try:
                await session.execute(text(
                    "ALTER TABLE email_tasks ALTER COLUMN uid SET NOT NULL"
                ))
                print("‚úÖ UID es NOT NULL")
            except Exception as e:
                print(f"‚ö†Ô∏è uid NOT NULL: {e}")
            
            # 4. Agregar constraint UNIQUE a uid
            print("üìù Agregando UNIQUE constraint a UID...")
            try:
                await session.execute(text(
                    "ALTER TABLE email_tasks ADD CONSTRAINT uq_email_tasks_uid UNIQUE (uid)"
                ))
                print("‚úÖ UNIQUE constraint agregado a UID")
            except Exception as e:
                print(f"‚ö†Ô∏è UNIQUE constraint: {e}")
            
            # 5. Agregar √≠ndice en status
            print("üìù Agregando √≠ndice en 'status'...")
            try:
                await session.execute(text(
                    "CREATE INDEX IF NOT EXISTS ix_email_tasks_status ON email_tasks(status)"
                ))
                print("‚úÖ √çndice en 'status' creado")
            except Exception as e:
                print(f"‚ö†Ô∏è √≠ndice status: {e}")
            
            # Commit de todos los cambios
            await session.commit()
            print("\nüéâ ¬°Migraci√≥n completada exitosamente!")
            
            # Mostrar estructura actual de la tabla
            print("\nüìä Verificando estructura de email_tasks...")
            result = await session.execute(text("""
                SELECT column_name, data_type, is_nullable
                FROM information_schema.columns
                WHERE table_name = 'email_tasks'
                ORDER BY ordinal_position
            """))
            
            print("\nüìã Columnas de email_tasks:")
            for row in result:
                nullable = "NULL" if row[2] == "YES" else "NOT NULL"
                print(f"  - {row[0]}: {row[1]} ({nullable})")
            
        except Exception as e:
            await session.rollback()
            print(f"\n‚ùå ERROR durante la migraci√≥n: {e}")
            raise

if __name__ == "__main__":
    print("=" * 60)
    print("  MIGRACI√ìN DE OPTIMIZACIONES PARA EMAIL_TASKS")
    print("=" * 60)
    print()
    
    asyncio.run(apply_migration())
    
    print()
    print("=" * 60)
    print("‚úÖ Migraci√≥n finalizada. El worker optimizado ya puede usarse.")
    print("=" * 60)
