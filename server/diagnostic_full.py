"""
Script de diagn√≥stico completo para verificar el flujo de ventas
"""
import asyncio
import sys
import os
from datetime import datetime

# Agregar el directorio parent al path para importar m√≥dulos
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import select, func
from database.models import Orden, DetalleOrden, VarianteProducto, Producto
from settings import settings

async def diagnostic_check():
    """Ejecuta un diagn√≥stico completo del sistema de ventas"""
    print("\n" + "="*80)
    print("üîç DIAGN√ìSTICO COMPLETO DEL SISTEMA DE VENTAS")
    print("="*80 + "\n")
    
    # 1. Verificar configuraci√≥n
    print("1Ô∏è‚É£ VERIFICANDO CONFIGURACI√ìN")
    print("-" * 80)
    print(f"‚úì BACKEND_URL: {settings.BACKEND_URL}")
    print(f"‚úì FRONTEND_URL: {settings.FRONTEND_URL}")
    print(f"‚úì DB_SQL_URI: {settings.DB_SQL_URI[:50]}...")
    print(f"‚úì MERCADOPAGO_TOKEN configurado: {'S√≠' if settings.MERCADOPAGO_TOKEN else 'NO ‚ùå'}")
    print()
    
    # 2. Conectar a la base de datos
    print("2Ô∏è‚É£ CONECTANDO A LA BASE DE DATOS")
    print("-" * 80)
    try:
        engine = create_async_engine(settings.DB_SQL_URI)
        AsyncSessionLocal = sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)
        print("‚úì Conexi√≥n exitosa a la base de datos")
        print()
    except Exception as e:
        print(f"‚ùå ERROR al conectar a la base de datos: {e}")
        return
    
    async with AsyncSessionLocal() as session:
        # 3. Verificar √≥rdenes
        print("3Ô∏è‚É£ VERIFICANDO √ìRDENES EN LA BASE DE DATOS")
        print("-" * 80)
        
        # Contar √≥rdenes totales
        result = await session.execute(select(func.count(Orden.id)))
        total_orders = result.scalar()
        print(f"üìä Total de √≥rdenes: {total_orders}")
        
        # Contar √≥rdenes por estado de pago
        result = await session.execute(
            select(Orden.estado_pago, func.count(Orden.id))
            .group_by(Orden.estado_pago)
        )
        for estado, count in result.all():
            print(f"   - {estado or 'Sin estado'}: {count} √≥rdenes")
        
        # Contar √≥rdenes por m√©todo de pago
        result = await session.execute(
            select(Orden.metodo_pago, func.count(Orden.id))
            .group_by(Orden.metodo_pago)
        )
        print(f"\nüìä √ìrdenes por m√©todo de pago:")
        for metodo, count in result.all():
            print(f"   - {metodo or 'Sin m√©todo'}: {count} √≥rdenes")
        
        print()
        
        # 4. Mostrar √∫ltimas 5 √≥rdenes
        print("4Ô∏è‚É£ √öLTIMAS 5 √ìRDENES REGISTRADAS")
        print("-" * 80)
        
        result = await session.execute(
            select(Orden)
            .order_by(Orden.creado_en.desc())
            .limit(5)
        )
        orders = result.scalars().all()
        
        if not orders:
            print("‚ö†Ô∏è  NO HAY √ìRDENES EN LA BASE DE DATOS")
            print()
            print("üîç POSIBLES CAUSAS:")
            print("   1. El webhook de Mercado Pago NO se est√° ejecutando")
            print("   2. El BACKEND_URL no es accesible desde internet")
            print("   3. No has configurado el webhook en Mercado Pago")
            print("   4. Hay un error en el proceso de checkout que causa rollback")
            print()
            print("üìù SIGUIENTE PASO:")
            print("   - Revisa los logs del backend despu√©s de hacer una compra")
            print("   - Busca mensajes con emojis: üîî üí≥ ‚úÖ ‚ùå")
            print("   - Si NO ves ning√∫n mensaje, el webhook NO se est√° llamando")
        else:
            for i, order in enumerate(orders, 1):
                print(f"\n{'='*80}")
                print(f"Orden #{order.id}")
                print(f"{'='*80}")
                print(f"üìÖ Fecha: {order.creado_en}")
                print(f"üë§ Usuario ID: {order.usuario_id}")
                print(f"üí∞ Monto Total: ${order.monto_total}")
                print(f"üì¶ Estado: {order.estado}")
                print(f"üí≥ Estado Pago: {order.estado_pago}")
                print(f"üè¶ M√©todo de Pago: {order.metodo_pago}")
                print(f"üÜî Payment ID MP: {order.payment_id_mercadopago}")
                
                # Obtener detalles
                details_result = await session.execute(
                    select(DetalleOrden)
                    .where(DetalleOrden.orden_id == order.id)
                )
                details = details_result.scalars().all()
                print(f"üì¶ Items en la orden: {len(details)}")
                
                for detail in details:
                    # Obtener info del producto
                    variant_result = await session.execute(
                        select(VarianteProducto)
                        .where(VarianteProducto.id == detail.variante_producto_id)
                    )
                    variant = variant_result.scalars().first()
                    
                    if variant:
                        product_result = await session.execute(
                            select(Producto)
                            .where(Producto.id == variant.producto_id)
                        )
                        product = product_result.scalars().first()
                        
                        if product:
                            print(f"   ‚Ä¢ {product.nombre} ({variant.color} - {variant.tamanio})")
                            print(f"     Cantidad: {detail.cantidad} x ${detail.precio_en_momento_compra}")
        
        print()
        
        # 5. Verificar stock de productos
        print("5Ô∏è‚É£ VERIFICANDO STOCK DE PRODUCTOS")
        print("-" * 80)
        
        result = await session.execute(
            select(Producto, func.sum(VarianteProducto.cantidad_en_stock))
            .join(VarianteProducto)
            .group_by(Producto.id)
            .limit(5)
        )
        
        print("üì¶ Stock de primeros 5 productos:")
        for product, total_stock in result.all():
            print(f"   ‚Ä¢ {product.nombre}: {total_stock} unidades")
        
        print()
    
    await engine.dispose()
    
    # 6. Instrucciones finales
    print("6Ô∏è‚É£ PR√ìXIMOS PASOS DE DIAGN√ìSTICO")
    print("-" * 80)
    print()
    print("Si NO hay √≥rdenes en la base de datos:")
    print("   1. Revisa los logs del backend durante una compra")
    print("   2. Verifica que veas los mensajes con emojis: üîî üí≥ ‚úÖ")
    print("   3. Si NO ves mensajes, el webhook NO se est√° ejecutando")
    print("   4. Verifica la URL del webhook en Mercado Pago:")
    print(f"      {settings.BACKEND_URL}/api/checkout/webhook")
    print()
    print("Si S√ç hay √≥rdenes pero NO aparecen en el admin:")
    print("   1. Verifica que el usuario est√© autenticado como admin")
    print("   2. Prueba el endpoint manualmente:")
    print("      GET /api/admin/sales")
    print("   3. Revisa la consola del navegador por errores")
    print()
    print("="*80 + "\n")

if __name__ == "__main__":
    try:
        asyncio.run(diagnostic_check())
    except Exception as e:
        print(f"\n‚ùå ERROR FATAL: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
