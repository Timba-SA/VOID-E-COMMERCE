# --- docker-compose.yml ---

services:
  # 1. El Backend (tu API con FastAPI/Uvicorn)
  backend:
    build:
      context: ./server
    container_name: void_backend_dev
    ports:
      - "8000:8000"
    volumes:
      - ./server:/app
    env_file:
      - ./.env
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    depends_on:
      - redis
    restart: unless-stopped

  # 2. El Frontend (tu app con React/Vue/etc.)
  frontend:
    build:
      context: ./client
    container_name: void_frontend_dev
    ports:
      - "5173:5173"
    volumes:
      - ./client:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
    restart: unless-stopped

  # 3. Redis (la base de datos en memoria para Celery y caché)
  redis:
    image: "redis:7-alpine"
    container_name: void_redis_dev
    ports:
      - "6379:6379"
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis-data:/data
    restart: unless-stopped

  # 4. Celery Worker (el obrero que hace las tareas pesadas)
  # Worker para tareas de IA (procesamiento de emails)
  worker_ia:
    build:
      context: ./server # Usa la misma imagen que el backend
    container_name: void_worker_ia_dev
    env_file:
      - ./.env
    command: ["celery", "-A", "celery_worker.celery_app", "worker", "--loglevel=INFO", "-Q", "ia_emails"]
    volumes:
      - ./server:/app
    depends_on:
      - redis
    restart: unless-stopped

  # Worker para tareas transaccionales (envíos críticos)
  worker_tx:
    build:
      context: ./server
    container_name: void_worker_tx_dev
    env_file:
      - ./.env
    command: ["celery", "-A", "celery_worker.celery_app", "worker", "--loglevel=INFO", "-Q", "transactional,default"]
    volumes:
      - ./server:/app
    depends_on:
      - redis
    restart: unless-stopped

  # 5. Celery Beat (el capataz que agenda las tareas periódicas como la del email)
  celery_beat:
    build:
      context: ./server # Usa la misma imagen que el backend y el worker
    container_name: void_celery_beat_dev
    env_file:
      - ./.env
    command: ["celery", "-A", "celery_worker.celery_app", "beat", "--loglevel=INFO"]
    volumes:
      - ./server:/app
    depends_on:
      - redis
    restart: unless-stopped

volumes:
  redis-data: